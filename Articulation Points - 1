//gfg link
//https://practice.geeksforgeeks.org/problems/articulation-point-1/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=articulation-point

//{ Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++

class Solution {
  private:
    void dfs(int node, int parent, int &timer, vector<int> &disc, vector<int> &low, 
    vector<int> &mark, vector<int> adj[], vector<int> &vis){
        vis[node]=1;
        disc[node]=low[node]=timer++;
        int child=0;
        for(auto it:adj[node]){
            if(it==parent) continue;
            
            if(!vis[it]){
                dfs(it, node, timer, disc, low, mark, adj, vis);
                low[node] = min(low[node], low[it]);
                //check AP or not
                if(low[it] >= disc[node] && parent!=-1){
                    mark[node]=1;
                }
                child++;
            }
            else{
                // node already visited and not parent
                //back edge
                low[node] = min(low[node], disc[it]);
            }
        }
        if(parent==-1 && child>1){
            mark[node]=1;
        }
    }
  public:
    vector<int> articulationPoints(int V, vector<int>adj[]) {
        int timer=0;
        vector<int> disc(V);
        vector<int> low(V);
        int parent=-1;
        vector<int> vis(V, 0);
        for(int i=0;i<V;i++){
            disc[i]=-1;
            low[i]=-1;
        }
        
        vector<int> mark(V, 0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                dfs(i, parent, timer, disc, low, mark, adj, vis);
            }
        }
        vector<int> ans;
        for(int i=0;i<V;i++){
            if(mark[i]==1){
                ans.push_back(i);
            }
        }
        if(ans.size()==0) return {-1};
        return ans;
    }
};

//{ Driver Code Starts.

int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		vector<int> ans = obj.articulationPoints(V, adj);
		for(auto i: ans)cout << i << " ";
		cout << "\n";
	}
	return 0;
}
// } Driver Code Ends
